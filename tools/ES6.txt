1.for...of遍历（除对象）

2.includes()：返回布尔值，表示是否找到了参数字符串。
startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。
这三个方法都支持第二个参数，表示开始搜索的位置。
var s = 'Hello world!';
s.startsWith('world', 6) // true

3.repeat方法返回一个新字符串，表示将原字符串重复n次。
'x'.repeat(3) // "xxx"
如果repeat的参数是负数或者Infinity，会报错。

4.padStart()，padEnd()
ES7推出了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart用于头部补全，padEnd用于尾部补全。
'1'.padStart(5, '0') //"00001"
'x'.padStart(4) // '   x'

5.模板字符串
var name = "Bob", time = "today";
`Hello ${name}, how are you ${time}?`	//"Hello Bob, how are you today?"
  * 所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。
  * 模板字符串之中还能调用函数。
function fn() {
  return "Hello World";
}

`foo ${fn()} bar`
// foo Hello World bar
  * 模板字符串甚至还能嵌套。
  * 如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。
  // 写法一
let str = 'return ' + '`Hello ${name}!`';
let func = new Function('name', str);
func('Jack') // "Hello Jack!"

// 写法二
let str = '(name) => `Hello ${name}!`';
let func = eval.call(null, str);
func('Jack') // "Hello Jack!"
 * 模板编译
 * 标签模板


 6.RegExp构造函数
 http://caibaojian.com/es6/regex.html


 7.数组的扩展
 Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。

let arrayLike = {
    '0': 'a',
    '1': 'b',
    '2': 'c',
    length: 3
};

// ES5的写法
var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']

// ES6的写法
let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']

* Array.from([1, 2, 3], (x) => x * x)
  // [1, 4, 9]
* Array.from([1, 2, 3], (x) => x * x)
  // [1, 4, 9]

8.Array.of方法用于将一组值，转换为数组。
  Array.of(3, 11, 8) // [3,11,8]
  Array.of(3) // [3]
  Array.of(3).length // 1

  Array() // []
  Array(3) // [, , ,]
  Array(3, 11, 8) // [3, 11, 8]

9.数组实例的copyWithin()
  target（必需）：从该位置开始替换数据。
  start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。
  end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
  * // 将3号位复制到0号位
    [1, 2, 3, 4, 5].copyWithin(0, 3, 4)
    // [4, 2, 3, 4, 5]
  * // -2相当于3号位，-1相当于4号位
    [1, 2, 3, 4, 5].copyWithin(0, -2, -1)
    // [4, 2, 3, 4, 5]

10.数组实例的find()和findIndex()
   数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。
   [1, 4, -5, 10].find((n) => n < 0)  // -5
   [1, 5, 10, 15].find(function(value, index, arr) {
       return value > 9;
   }) // 10
   数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。

11.数组实例的fill()
   ['a', 'b', 'c'].fill(7) // [7, 7, 7]
   ['a', 'b', 'c'].fill(7, 1, 2) // ['a', 7, 'c']

12.数组实例的entries()，keys()和values()
   可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。

13.数组实例的includes()
   [1, 2, 3].includes(2);     // true
   该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。
   [1, 2, 3].includes(3, 3);  // false
[1, 2, 3].includes(3, -1); // true
   * indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相当运算符（===）进行判断，这会导致对NaN的误判。
   * 另外，Map和Set数据结构有一个has方法，需要注意与includes区分。
     Map结构的has方法，是用来查找键名的，比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.ha     s(target, propertyKey)。
     Set结构的has方法，是用来查找值的，比如Set.prototype.has(value)、WeakSet.prototype.has(value)。

14.数组的空位
   0 in [undefined, undefined, undefined] // true
   0 in [, , ,] // false
   上面代码说明，第一个数组的0号位置是有值的，第二个数组的0号位置没有值。
   ES5对空位的处理，已经很不一致了，大多数情况下会忽略空位。
   forEach(), filter(), every() 和some()都会跳过空位。
   map()会跳过空位，但会保留这个值
   join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串

15.函数参数的默认值
   ES6允许为函数的参数设置默认值，即直接写在参数定义的后面。
  function log(x, y = 'World') {
    console.log(x, y);
  }

  function foo(x = 5) {
    let x = 1; // error
    const x = 2; // error
  }
  上面代码中，参数变量x是默认声明的，在函数体中，不能用let或const再次声明，否则会报错。

16.与解构赋值默认值结合使用
  function fetch(url, { method = 'GET' } = {}) {
    console.log(method);
  } 

17.函数的length属性
(function (a, b, c = 5) {}).length // 2
这是因为length属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，rest参数也不会计入length属性。


18.rest参数
  ES6引入rest参数（形式为“...变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest参数搭配的变量是一个数组，该变量将多余的参数放入数组中。(注意，rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错)

function add(...values) {
  let sum = 0;
  for (var val of values) {
    sum += val;
  }
  return sum;
}

add(2, 5, 3) // 10
// arguments变量的写法
function sortNumbers() {
  return Array.prototype.slice.call(arguments).sort();
}

// rest参数的写法
const sortNumbers = (...numbers) => numbers.sort();


19.扩展运算符的应用
   （1）合并数组
   // ES5
   [1, 2].concat(more)
   // ES6
   [1, 2, ...more]

[...'hello']	//["h", "e", "l", "l", "o"]

20.name属性
function foo() {}
foo.name // "foo"
(new Function).name // "anonymous"

21.箭头函数
   * 基本用法
     var f = v => v;
     上面的箭头函数等同于：

     var f = function(v) {
       return v;
     };


     var f = () => 5;
     // 等同于
     var f = function () { return 5 };

     var sum = (num1, num2) => num1 + num2;
     // 等同于
     var sum = function(num1, num2) {
       return num1 + num2;
     };
     @ 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。
      var sum = (num1, num2) => { return num1 + num2; }

     @ 由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。
	var getTempItem = id => ({ id: id, name: "Temp" });
   
     @ 箭头函数可以与变量解构结合使用。
	const full = ({ first, last }) => first + ' ' + last;

	// 等同于
	function full(person) {
  		return person.first + ' ' + person.last;
	}
     @ 箭头函数使得表达更加简洁。
	const isEven = n => n % 2 == 0;
	const square = n => n * n;
     @箭头函数的一个用处是简化回调函数。

	// 正常函数写法
	[1,2,3].map(function (x) {
 	 return x * x;
	});

	// 箭头函数写法
	[1,2,3].map(x => x * x);

	下面是rest参数与箭头函数结合的例子。
	const numbers = (...nums) => nums;
	numbers(1, 2, 3, 4, 5)
	// [1,2,3,4,5]
	const headAndTail = (head, ...tail) => [head, tail];
	headAndTail(1, 2, 3, 4, 5)
	// [1,[2,3,4,5]]

* 箭头函数有几个使用注意点。
 （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
 （2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
 （3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。
 （4）不可以使用yield命令，因此箭头函数不能用作Generator函数。

* 嵌套的箭头函数
  let insert = (value) => ({into: (array) => ({after: (afterValue) => {
     array.splice(array.indexOf(afterValue) + 1, 0, value);
     return array;
  }})});
  insert(2).into([1, 3]).after(1); //[1, 2, 3]

* 尾调用优化
  指某个函数的最后一步是调用另一个函数
  尾递归优化过的fibonacci 递归算法.只保留一个调用记录，复杂度 O(1)
  function Fibonacci2 (n , ac1 = 1 , ac2 = 1) {
    if( n <= 1 ) {return ac2};
    return Fibonacci2 (n - 1, ac2, ac1 + ac2);
  }
  由此可见，“尾调用优化”对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6也是如此，第一次明确规定，所有ECMAScript的实现，都必须部署“尾调用优化”。这就是说，在ES6中，只要使用尾递归，就不会发生栈溢出，相对节省内存。

22.属性的简洁表示法
   function f(x, y) {
  	return {x, y};
  }
  var o = {
  method() {
    return "Hello!";
  }
};

23.属性名表达式
// 方法一
obj.foo = true;

// 方法二
obj['a' + 'bc'] = 123;
ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。
let propKey = 'foo';
let obj = {
  [propKey]: true,
  ['a' + 'bc']: 123
};
表达式还可以用于定义方法名。
let obj = {
  ['h' + 'ello']() {
    return 'hi';
  }
};
obj.hello() // hi


23.Object.is()
ES6提出“Same-value equality”（同值相等）算法
Object.is('foo', 'foo')
// true
Object.is({}, {})
// false
+0 === -0 //true
NaN === NaN // false

Object.is(+0, -0) // false
Object.is(NaN, NaN) // true

24.Object.assign()
Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
var target = { a: 1 };
var source1 = { b: 2 };
var source2 = { c: 3 };
Object.assign(target, source1, source2);
target // {a:1, b:2, c:3}
注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。
var target = { a: 1, b: 1 };
var source1 = { b: 2, c: 2 };
var source2 = { c: 3 };
Object.assign(target, source1, source2);
target // {a:1, b:2, c:3}

 * 如果该参数不是对象，则会先转成对象，然后返回。
   typeof Object.assign(2) // "object"
 * 由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。
   Object.assign(undefined) // 报错
   Object.assign(null) // 报错
 * 如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无   法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。
   let obj = {a: 1};
   Object.assign(obj, undefined) === obj // true
   Object.assign(obj, null) === obj // true
  注意点 Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。
  常见用途
 （1）为对象添加属性
 class Point {
  constructor(x, y) {
    Object.assign(this, {x, y});
  }
}
（2）为对象添加方法
Object.assign(SomeClass.prototype, {
  someMethod(arg1, arg2) {
    ···
  },
  anotherMethod() {
    ···
  }
});
（3）克隆对象
function clone(origin) {
  return Object.assign({}, origin);
}
不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。

function clone(origin) {
  let originProto = Object.getPrototypeOf(origin);
  return Object.assign(Object.create(originProto), origin);
}
（4）合并多个对象
const merge =
  (target, ...sources) => Object.assign(target, ...sources);
  如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。
const merge =
  (...sources) => Object.assign({}, ...sources);

25.属性的可枚举性
描述对象的enumerable属性，称为”可枚举性“，如果该属性为false，就表示某些操作会忽略当前属性。
for...in循环：只遍历对象自身的和继承的可枚举的属性
Object.keys()：返回对象自身的所有可枚举的属性的键名
JSON.stringify()：只串行化对象自身的可枚举的属性
Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。

26.属性的遍历
（1）for...in
for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。
（2）Object.keys(obj)
Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。
（3）Object.getOwnPropertyNames(obj)
Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。
（4）Object.getOwnPropertySymbols(obj)
Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。
（5）Reflect.ownKeys(obj)
Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。
以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。
首先遍历所有属性名为数值的属性，按照数字排序。
其次遍历所有属性名为字符串的属性，按照生成时间排序。
最后遍历所有属性名为Symbol值的属性，按照生成时间排序。


26.symbol
ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）

27.Symbol.for()，Symbol.keyFor()
我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。

Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。

 * 实例：模块的 Singleton 模式

28.set和map数据结构
var s = new Set();
[2, 3, 5, 4, 5, 2, 2].map(x => s.add(x));
for (let i of s) {
  console.log(i);
}
// 2 3 5 4
上面代码通过add方法向Set结构加入成员，结果表明Set结构不会添加重复的值
// 例一
var set = new Set([1, 2, 3, 4, 4]);
[...set]
// [1, 2, 3, 4]
// 例二
var items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
items.size // 5
// 例三
function divs () {
  return [...document.querySelectorAll('div')];
}
var set = new Set(divs());
set.size // 56

* Set实例的属性和方法
  Set结构的实例有以下属性。

  Set.prototype.constructor：构造函数，默认就是Set函数。
  Set.prototype.size：返回Set实例的成员总数。
  Set实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。

  add(value)：添加某个值，返回Set结构本身。
  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
  has(value)：返回一个布尔值，表示该值是否为Set的成员。
  clear()：清除所有成员，没有返回值。
* 遍历操作
  Set结构的实例有四个遍历方法，可以用于遍历成员。

  keys()：返回键名的遍历器
  values()：返回键值的遍历器
  entries()：返回键值对的遍历器
  forEach()：使用回调函数遍历每个成员

29.Map
（1）size属性
（2）set(key, value)
（3）get(key)
     get方法读取key对应的键值，如果找不到key，返回undefined。
（4）has(key)
     has方法返回一个布尔值，表示某个键是否在Map数据结构中。
（5）delete(key)
（6）clear()
* 遍历方法
  keys()：返回键名的遍历器。
  values()：返回键值的遍历器。
  entries()：返回所有成员的遍历器。
  forEach()：遍历Map的所有成员。
  for (let item of map.entries()) {
     console.log(item[0], item[1]);
  }
  // 或者
  for (let [key, value] of map.entries()) {
    console.log(key, value);
  }

  // 等同于使用map.entries()
  for (let [key, value] of map) {
    console.log(key, value);
  }
  * Map结构转为数组结构，比较快速的方法是结合使用扩展运算符（...）。

let map = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three'],
]);

[...map.keys()]
// [1, 2, 3]

[...map.values()]
// ['one', 'two', 'three']

[...map.entries()]
// [[1,'one'], [2, 'two'], [3, 'three']]

[...map]
// [[1,'one'], [2, 'two'], [3, 'three']]
结合数组的map方法、filter方法，可以实现Map的遍历和过滤（Map本身没有map和filter方法）。

let map0 = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');

let map1 = new Map(
  [...map0].filter(([k, v]) => k < 3)
);
// 产生Map结构 {1 => 'a', 2 => 'b'}

let map2 = new Map(
  [...map0].map(([k, v]) => [k * 2, '_' + v])
    );
// 产生Map结构 {2 => '_a', 4 => '_b', 6 => '_c'}

map.forEach(function(value, key, map) {
  console.log("Key: %s, Value: %s", key, value);
});

30.与其他数据结构的互相转换
（1）Map转为数组
（2）数组转为Map
new Map([[true, 7], [{foo: 3}, ['abc']]])
（3）Map转为对象
function strMapToObj(strMap) {
  let obj = Object.create(null);
  for (let [k,v] of strMap) {
    obj[k] = v;
  }
  return obj;
}

let myMap = new Map().set('yes', true).set('no', false);
strMapToObj(myMap)
// { yes: true, no: false }
（4）对象转为Map
function objToStrMap(obj) {
  let strMap = new Map();
  for (let k of Object.keys(obj)) {
    strMap.set(k, obj[k]);
  }
  return strMap;
}

objToStrMap({yes: true, no: false})
// [ [ 'yes', true ], [ 'no', false ] ]
5）Map转为JSON
<a>
function strMapToJson(strMap) {
  return JSON.stringify(strMapToObj(strMap));
}

let myMap = new Map().set('yes', true).set('no', false);
strMapToJson(myMap)
// '{"yes":true,"no":false}'
<b>
function mapToArrayJson(map) {
  return JSON.stringify([...map]);
}

let myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);
mapToArrayJson(myMap)
// '[[true,7],[{"foo":3},["abc"]]]'
（6）JSON转为Map
<a>
function jsonToStrMap(jsonStr) {
  return objToStrMap(JSON.parse(jsonStr));
}

jsonToStrMap('{"yes":true,"no":false}')
// Map {'yes' => true, 'no' => false}
<b>
function jsonToMap(jsonStr) {
  return new Map(JSON.parse(jsonStr));
}

jsonToMap('[[true,7],[{"foo":3},["abc"]]]')
// Map {true => 7, Object {foo: 3} => ['abc']}

31.Proxy 概述
   Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。
 （1）get(target, propKey, receiver)
拦截对象属性的读取，比如proxy.foo和proxy['foo']。
最后一个参数receiver是一个对象，可选，参见下面Reflect.get的部分。
（2）set(target, propKey, value, receiver)
拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。
（3）has(target, propKey)
拦截propKey in proxy的操作，以及对象的hasOwnProperty方法，返回一个布尔值。
（4）deleteProperty(target, propKey)
拦截delete proxy[propKey]的操作，返回一个布尔值。
（5）ownKeys(target)
拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)，返回一个数组。该方法返回对象所有自身的属性，而Object.keys()仅返回对象可遍历的属性。
（6）getOwnPropertyDescriptor(target, propKey)
拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。
（7）defineProperty(target, propKey, propDesc)
拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。
（8）preventExtensions(target)
拦截Object.preventExtensions(proxy)，返回一个布尔值。
（9）getPrototypeOf(target)
拦截Object.getPrototypeOf(proxy)，返回一个对象。
（10）isExtensible(target)
拦截Object.isExtensible(proxy)，返回一个布尔值。
（11）setPrototypeOf(target, proto)
拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。
如果目标对象是函数，那么还有两种额外操作可以拦截。
（12）apply(target, object, args)
拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。
（13）construct(target, args)
拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。

32.Reflect对象的方法
（1）Reflect.get(target, name, receiver)
查找并返回target对象的name属性，如果没有该属性，则返回undefined。
如果name属性部署了读取函数，则读取函数的this绑定receiver。
（2）Reflect.set(target, name, value, receiver)

设置target对象的name属性等于value。如果name属性设置了赋值函数，则赋值函数的this绑定receiver。

（3）Reflect.has(obj, name)

等同于name in obj。

（4）Reflect.deleteProperty(obj, name)

等同于delete obj[name]。

（5）Reflect.construct(target, args)

等同于new target(...args)，这提供了一种不使用new，来调用构造函数的方法。

（6）Reflect.getPrototypeOf(obj)

读取对象的__proto__属性，对应Object.getPrototypeOf(obj)。

（7）Reflect.setPrototypeOf(obj, newProto)

设置对象的__proto__属性，对应Object.setPrototypeOf(obj, newProto)。

（8）Reflect.apply(fun,thisArg,args)

等同于Function.prototype.apply.call(fun,thisArg,args)。一般来说，如果要绑定一个函数的this对象，可以这样写fn.apply(obj, args)，但是如果函数定义了自己的apply方法，就只能写成Function.prototype.apply.call(fn, obj, args)，采用Reflect对象可以简化这种操作。
